(function (e, t) {
    e.fn.datetimepicker = function (t) {
        if (typeof t == typeof "")return this.datepicker.apply(this, arguments);
        t = e.extend({}, t);
        t.showTime = true;
        t.constrainInput = false;
        return this.datepicker(t)
    };
    e.datepicker._defaults.clockType = 12;
    e.datepicker._getTimeText = function (e, t, n) {
        t = t || e.selectedHour || 0;
        n = n || e.selectedMinute || 0;
        if (this._get(e, "clockType") == 12) {
            return(t == 0 || t == 12 ? "12" : t >= 12 ? t - 12 : t) + ":" + (n < 10 ? "0" + n : n) + ":00" + +" " + (t < 12 ? "AM" : "PM")
        } else {
            return(t < 10 ? "0" + t : t) + ":" + (n < 10 ? "0" + n : n) + ":00"
        }
    };
    var n = e.datepicker.formatDate;
    e.datepicker.formatDate = function (t, r, i, s) {
        var o = e.datepicker._curInst;
        var u = o ? this._get(o, "showTime") : false;
        if (!s) {
            s = " "
        }
        if (u) {
            r.setHours(o.selectedHour || 0);
            r.setMinutes(o.selectedMinute || 0)
        }
        return n.apply(this, arguments) + (u ? s + this._getTimeText(o) : "")
    };
    var r = e.datepicker._updateAlternate;
    e.datepicker._updateAlternate = function (t) {
        var n, r, s, o = this._get(t, "altField");
        if (o) {
            n = this._get(t, "altFormat") || this._get(t, "dateFormat");
            r = this._getDate(t);
            s = this.formatDate(n, r, this._getFormatConfig(t), this._get(t, "altFormatSeparator"));
            if (o.attr("data-basetype") === "datetime") {
                if (!/T\d{2}:\d{2}:\d{2}/.test(s)) {
                    s = s + "T" + i(new Date(Date.now()))
                }
                var u = function (e) {
                    var t = function (e, t) {
                        var n = "" + e;
                        while (n.length < t) {
                            n = "0" + n
                        }
                        return n
                    };
                    var n = e.getTimezoneOffset();
                    n = (n < 0 ? "+" : "-") + t(parseInt(Math.abs(n / 60)), 2) + t(Math.abs(n % 60), 2);
                    return n.replace(/(\d{2})$/, ":$1")
                };
                s = s + u(r)
            }
            e(o).each(function () {
                e(this).val(s)
            }).trigger("blur")
        }
    };
    var i = function (e) {
        return e.toTimeString().split(" ")[0]
    };
    var s = e.datepicker._setDate;
    e.datepicker._setDate = function (e, t, n) {
        t = new Date(t);
        s.apply(this, arguments);
        var r = this._get(e, "altField");
        var o = e.input.val();
        if (r && r.attr("data-basetype") === "datetime" && !/\s\d{2}:\d{2}:\d{2}/.test(o)) {
            e.input.val(o + " " + i(t))
        }
    };
    var o = e.datepicker._hideDatepicker;
    e.datepicker._hideDatepicker = function () {
        var n = e.datepicker._curInst;
        n.selectedHour = n.currentHour = n.selectedMinute = n.currentMinute = t;
        o.apply(this, arguments)
    };
    var u = e.datepicker._getDate;
    e.datepicker._getDate = function (e) {
        var t = u.apply(this, arguments);
        if (t) {
            t.setHours(e.selectedHour || e.currentHour);
            t.setMinutes(e.selectedMinute || e.currentMinute)
        }
        if (!t || isNaN(t.getTime())) {
            t = new Date(Date.now())
        }
        return t
    };
    var a = e.datepicker.parseDate;
    var f = /\s+([0-9]+)(\:[0-9]+){0,1}(\:[0-9]+){0,1}(\s*[apm]+){0,1}/i;
    e.datepicker.parseDate = function (t, n, r) {
        var i = 0, s = 0;
        var o = n.match(f);
        if (e.isArray(o)) {
            i = parseFloat(o[1]);
            s = parseFloat((o[2] || "").replace(":", ""));
            if (isNaN(i))i = 0;
            if (isNaN(s))s = 0;
            if ((r.clockType || e.datepicker._defaults.clockType) == 12) {
                if (i == 12)i = 0;
                if (o[0].toLowerCase().indexOf("p") > -1)i += 12
            }
            n = n.replace(o[0], "")
        }
        var u = a.apply(this, arguments);
        u.setHours(i);
        u.setMinutes(s);
        return u
    };
    e.datepicker._setDateFromField = function (e, t) {
        if (e.input.val() == e.lastVal) {
            return
        }
        var n = this._get(e, "dateFormat");
        var r = e.lastVal = e.input ? e.input.val() : null;
        var i, s;
        i = s = this._getDefaultDate(e);
        var o = this._getFormatConfig(e);
        try {
            i = this.parseDate(n, r, o) || s
        } catch (u) {
            r = t ? "" : r
        }
        e.selectedDay = i.getDate();
        e.drawMonth = e.selectedMonth = i.getMonth();
        e.drawYear = e.selectedYear = i.getFullYear();
        e.currentDay = r ? i.getDate() : 0;
        e.currentMonth = r ? i.getMonth() : 0;
        e.currentYear = r ? i.getFullYear() : 0;
        e.currentHour = e.selectedHour = r ? i.getHours() : 0;
        e.currentMinute = e.selectedMinute = r ? i.getMinutes() : 0;
        this._adjustInstDate(e);
        this._updateDatepicker(e)
    };
    var l = e.datepicker._updateDatepicker;
    e.datepicker._updateDatepicker = function (t) {
        var n = this._get(t, "showTime");
        var r = this._get(t, "buttons");
        var i = this;
        if (r)t.settings["showButtonPanel"] = true;
        l.apply(this, arguments);
        t.dpDiv.css({zIndex: 1e3});
        if (r) {
            var s = t.dpDiv.find(".ui-datepicker-buttonpane:first").html("");
            for (var o in r) {
                var u = e('<button class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all"/>');
                (function (e) {
                    if (typeof e == "object") {
                        if (e.attr)u.attr(e.attr);
                        if (e.css)u.css(e.css);
                        e = e.click || function () {
                        }
                    }
                    u.text(o).click(function () {
                        e.apply(i, ["#" + t.id, t])
                    }).appendTo(s)
                })(r[o])
            }
        }
        if (n) {
            var a = t.dpDiv.find("table:last");
            var f = a.find("thead>tr:first");
            var c = a.find("tbody>tr:first");
            var h = c.parent().children("tr").length;
            var p = e('<th colspan="2" style="white-space:nowrap">12:00 AM</th>').prependTo(f);
            p.width(p.width());
            var d = t.dpDiv.width();
            t.dpDiv.width(d + p.width());
            var v = t.dpDiv.find(".ui-datepicker-group");
            v.width(d / v.length);
            v.eq(v.length - 1).width(d / v.length + p.width());
            var m = a.height() - a.find("td:first").height() * 2;
            var g = e("<td/>").css({height: m, marginTop: 10}).attr("rowspan", h).prependTo(c);
            var y = e("<td/>").css({height: m, marginTop: 10, paddingLeft: 20}).attr("rowspan", h).prependTo(c);
            var b = e("<div/>").appendTo(y);
            var w = e("<div/>").appendTo(g);
            t.selectedHour = t.selectedHour || t.currentHour;
            t.selectedMinute = t.selectedMinute || t.currentMinute;
            p.text(e.datepicker._getTimeText(t));
            b.slider({min: 0, max: 23, value: t.selectedHour, orientation: "vertical", slide: function (n, r) {
                t.selectedHour = r.value;
                if (t.input) {
                    t.input.val(e.datepicker._formatDate(t));
                    e.datepicker._updateAlternate(t)
                }
                p.text(e.datepicker._getTimeText(t))
            }});
            w.slider({min: 0, max: 59, value: t.selectedMinute, orientation: "vertical", slide: function (n, r) {
                t.selectedMinute = r.value;
                if (t.input) {
                    t.input.val(e.datepicker._formatDate(t));
                    e.datepicker._updateAlternate(t)
                }
                p.text(e.datepicker._getTimeText(t))
            }})
        }
    }
})(jQuery)
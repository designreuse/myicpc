// Generated by CoffeeScript 1.8.0
var AtmosphereRequest, appendIdToCookieArray, appendInputValueToLinkHref, compileHandlebarsTemplate, convertSecondsToHHMMSS, convertSecondsToMinutes, createDateTimePickerOption, datePickerOptions, dismissNotification, escapePlusSign, formatContestTime, getCookie, getCookieAsIntArray, getSubscribeAddress, isElementVisible, notificationCountPolling, previewWikiSyntax, removeIdFromCookieArray, setCookie, setFixedSubmenuHeight, startSubscribe;

AtmosphereRequest = (function() {
  function AtmosphereRequest(url, onMessage) {
    this.url = url;
    this.onMessage = onMessage;
    this.contentType = "application/json";
    this.logLevel = 'debug';
    this.transport = 'sse';
    this.trackMessageLength = true;
    this.reconnectInterval = 5000;
    this.fallbackTransport = 'long-polling';
    this.onOpen = function(response) {
      return console.log("Atmosphere onOpen: Atmosphere connected using " + response.transport);
    };
    this.onReopen = function(response) {
      return console.log("Atmosphere re-connected using " + response.transport);
    };
    this.onClose = function(response) {
      return console.log('Atmosphere onClose executed');
    };
    this.onError = function(response) {
      return console.log('Atmosphere onError: Sorry, but there is some problem with your socket or the server is down!');
    };
  }

  return AtmosphereRequest;

})();

startSubscribe = function(contextPath, contestCode, channel, processMethod, ngController) {
  var connectedSocket, request, socket;
  socket = $.atmosphere;
  request = new AtmosphereRequest(getSubscribeAddress(contextPath) + contestCode + "/" + channel, function(response) {
    var result;
    result = $.parseJSON(response.responseBody);
    console.log(result);
    return processMethod(result, ngController);
  });
  return connectedSocket = socket.subscribe(request);
};

getSubscribeAddress = function(contextPath) {
  contextPath = contextPath !== "" ? contextPath + '/' : '/';
  return window.location.protocol + "//" + window.location.hostname + ':' + window.location.port + contextPath + 'pubsub/';
};

compileHandlebarsTemplate = function(id) {
  var elem;
  elem = $("#" + id);
  if (elem.length !== 0) {
    return Handlebars.compile(elem.html());
  }
  return null;
};

datePickerOptions = {
  dateFormat: "yy-mm-dd",
  clockType: 24
};

createDateTimePickerOption = function(onClose) {
  var merged;
  merged = {
    'onClose': onClose
  };
  $.extend(merged, datePickerOptions);
  return merged;
};

convertSecondsToMinutes = function(seconds) {
  return Math.floor(seconds / 60);
};

formatContestTime = function(seconds) {
  var divisor_for_minutes, hours, minus, minutes;
  minus = "";
  if (seconds < 0) {
    seconds *= -1;
    minus = "-";
  }
  hours = Math.floor(seconds / (60 * 60));
  divisor_for_minutes = seconds % (60 * 60);
  minutes = Math.floor(divisor_for_minutes / 60);
  if (hours < 10) {
    hours = "0" + hours;
  }
  if (minutes < 10) {
    minutes = "0" + minutes;
  }
  return minus + hours + ":" + minutes;
};


/*
 Convert seconds into hours and minutes and seconds
 @param seconds number of seconds
 @returns time in format HH:MM:SS
 */

convertSecondsToHHMMSS = function(seconds) {
  var hours, minutes, s;
  hours = Math.floor(seconds / 3600);
  seconds %= 3600;
  minutes = Math.floor(seconds / 60);
  seconds %= 60;
  s = "";
  if (hours) {
    if (hours < 10) {
      hours = "0" + hours;
    }
    s = hours + ":";
  }
  if (minutes < 10) {
    minutes = "0" + minutes;
  }
  s += minutes + ":";
  if (seconds < 10) {
    seconds = "0" + seconds;
  }
  return s + seconds;
};

isElementVisible = function(elem, offset) {
  var $e, win;
  if (offset == null) {
    offset = 0;
  }
  $e = $(elem);
  win = $(window);
  return win.scrollTop() + window.innerHeight + offset > $e.offset().top && win.scrollTop() + offset < $e.offset().top + $e.height();
};

escapePlusSign = function(string) {
  return string.replace(new RegExp("\\+", "g"), "%2B");
};

setFixedSubmenuHeight = function() {
  var bodyHeight, fixedSidebar, footerHeight, height, pageTitle, pageTitleBottom, viewportHeight;
  footerHeight = $("#footer").outerHeight(true);
  viewportHeight = $(window).height();
  pageTitle = $('#pageTitle');
  pageTitleBottom = pageTitle.position().top + pageTitle.outerHeight() + pageTitle.offset().top;
  height = viewportHeight - pageTitleBottom - footerHeight;
  bodyHeight = $("#fixedContent").outerHeight();
  fixedSidebar = $("#fixedSidebar");
  return fixedSidebar.height(Math.max(height, bodyHeight));
};


/*
 * Set cookies
 * @param c_name cookie name
 * @param value cookie value
 * @param exdays expiration date
 * @param path cookie path
 */

setCookie = function(c_name, value, exdays, path) {
  var c_value, exdate;
  exdate = new Date;
  c_value = void 0;
  exdate.setDate(exdate.getDate() + exdays);
  if (path === void 0 || path === '') {
    path = '/';
  }
  c_value = value + ';path=' + path + (exdays === null ? '' : '; expires=' + exdate.toUTCString());
  document.cookie = c_name + '=' + c_value;
};


/*
 * Get cookie value
 * @param c_name cookie name
 * @returns cookie value
 */

getCookie = function(c_name) {
  var c_end, c_start, c_value;
  c_value = document.cookie;
  c_start = c_value.indexOf(' ' + c_name + '=');
  c_end = void 0;
  if (c_start === -1) {
    c_start = c_value.indexOf(c_name + '=');
  }
  if (c_start === -1) {
    c_value = null;
  } else {
    c_start = c_value.indexOf('=', c_start) + 1;
    c_end = c_value.indexOf(';', c_start);
    if (c_end === -1) {
      c_end = c_value.length;
    }
    c_value = unescape(c_value.substring(c_start, c_end));
  }
  if (c_value !== null) {
    c_value = c_value.replace(/"/g, '');
  }
  return c_value;
};

getCookieAsIntArray = function(c_name) {
  var arr, i, value, _i, _ref;
  value = getCookie(c_name);
  if (value != null) {
    arr = value.split(',');
    if ($.isArray(arr)) {
      for (i = _i = 0, _ref = arr.length - 1; _i <= _ref; i = _i += 1) {
        arr[i] = parseInt(arr[i]);
      }
      return arr;
    }
  }
  return [];
};


/*
 * Append a value to the cookie
 * @param c_name cookie path
 * @param id appended value
 * @param path cookie path
 */

appendIdToCookieArray = function(c_name, id, path) {
  var arr, value;
  arr = getCookieAsIntArray(c_name);
  if (arr.length === 0) {
    value = escape(id);
  } else {
    value = arr.join();
    value += ',' + escape(id);
  }
  return setCookie(c_name, value, 7, path);
};


/*
 * Delete a number value from the cookie
 * @param c_name cookie path
 * @param id appended value
 * @param path cookie path
 */

removeIdFromCookieArray = function(c_name, id, path) {
  var arr, i, value, _i, _ref;
  value = '';
  arr = getCookieAsIntArray(c_name);
  for (i = _i = 0, _ref = arr.length - 1; _i <= _ref; i = _i += 1) {
    if (arr[i] !== id) {
      value += arr[i] + ',';
    }
  }
  value = value.substring(0, value.length - 1);
  if (value === '') {
    setCookie(c_name, value, -1, path);
  } else {
    setCookie(c_name, value, 7, path);
  }
};


/*
 * Dismiss a notification and updates notification counter
 */

dismissNotification = function(notificationId, path) {
  var $notificationCounter, counter;
  appendIdToCookieArray('ignoreFeaturedNotifications', notificationId, path);
  $notificationCounter = $("#notification-counter");
  counter = parseInt($notificationCounter.html());
  return $notificationCounter.html(counter - 1);
};


/**
 * Use service to transtate plain text to wiki text
 * @param url service URL
 * @param source plain text source
 * @param target target, where result is inserted
 */

previewWikiSyntax = function(url, source, target) {
  var value;
  value = source.val();
  return $.post(url, {
    'text': value
  }, function(data) {
    return $(target).html(data);
  });
};


/*
 * Appends a value of {@code input} to the href of {@code link}
 *
 * @param link link HTML element
 * @param input input HTML element
 */

appendInputValueToLinkHref = function(link, input) {
  var $link;
  $link = $(link);
  return $link.attr('href', $link.attr('href') + $(input).val());
};


/*
 * Starts polling the notification counter
 *
 * @param ctx application contest path
 * @param contestURL contest URL
 */

notificationCountPolling = function(ctx, contestURL) {
  return setTimeout(function() {
    return $.get("" + ctx + contestURL + "/notification/count", function(data) {
      $('#notification-counter').replaceWith(data);
      return notificationCountPolling(ctx, contestURL);
    });
  }, 60000);
};

// Generated by CoffeeScript 1.8.0
var problemApp, updateProblemView;

problemApp = angular.module('problem', ['ngRoute', 'nvd3ChartDirectives']);

problemApp.config([
  '$routeProvider', function($routeProvider) {
    return $routeProvider.when('/attempts', {
      templateUrl: 'attemps-template',
      controller: 'problemAttempsCtrl'
    }).when('/teams', {
      templateUrl: 'teams-template',
      controller: 'problemTeamsCtrl'
    }).when('/overview', {
      templateUrl: 'overview-template',
      controller: 'problemOverviewCtrl'
    }).otherwise({
      redirectTo: '/attempts'
    });
  }
]);

problemApp.directive('doubleTick', function() {
  return {
    restrict: 'E',
    scope: {
      condition: '=ngModel'
    },
    template: '<span class="glyphicon glyphicon-ok" ng-if="condition"></span>' + '<span class="glyphicon glyphicon-remove" ng-if="!condition"></span>'
  };
});

problemApp.directive('tripleTick', function() {
  return {
    restrict: 'E',
    scope: {
      submission: '=ngModel'
    },
    template: '<span class="glyphicon glyphicon-ok" ng-if="submission.judged && submission.solved"></span>' + '<span class="glyphicon glyphicon-remove" ng-if="submission.judged && !submission.solved"></span>' + '<span class="glyphicon glyphicon-time"ng-if="!submission.judged"></span>'
  };
});

problemApp.directive('solutionBar', function() {
  return {
    restrict: 'E',
    scope: {
      submission: '=ngModel'
    },
    template: '<div class="progress" title="Passed {{submission.passed}} out of {{submission.testcases}}"> <div class="progress-bar progress-bar-success" role="progressbar" style="width: {{calcProgressPercentage(submission)}}%;" style="min-width: 2em; width: 2%;"> <span>{{submission.passed}} Passed</span> </div> <div class="progress-bar progress-bar-danger" role="progressbar" style="width: {{100 - calcProgressPercentage(submission)}}%;" style="min-width: 2em; width: 2%;"> <span>{{submission.testcases - submission.passed}} Failed</span> </div> </div>',
    controller: function($scope) {
      return $scope.calcProgressPercentage = function(submission) {
        if ((submission.testcases != null) && submission.testcases > 0) {
          return Math.round(100 * submission.passed / submission.testcases);
        }
        return 0;
      };
    }
  };
});

problemApp.factory('problemService', function($rootScope) {
  var problemService;
  problemService = {};
  problemService.addTeamSubmission = function(submission) {
    return $rootScope.$broadcast("addSubmission", submission);
  };
  problemService.getSubmissionIndex = function(submissions, submission) {
    var i, index, _i, _ref;
    index = -1;
    if ((submissions != null) && submissions.length > 0) {
      for (i = _i = 0, _ref = submissions.length - 1; _i <= _ref; i = _i += 1) {
        if (submissions[i].id === submission.id) {
          index = i;
          break;
        }
      }
    }
    return index;
  };
  return problemService;
});

problemApp.controller('problemCtrl', function($scope, $rootScope, problemService) {
  $scope.addTeamSubmission = problemService.addTeamSubmission;
  return $scope.setJudgements = function(judgements) {
    return $rootScope.judgements = judgements;
  };
});

problemApp.controller('problemAttempsCtrl', function($scope, $rootScope, $http, problemService) {
  $scope.dataLoaded = false;
  $scope.submissions = [];
  $scope.init = function(contextPath, contestCode, problemCode) {
    var url;
    $rootScope.activeTab = 'attempts';
    url = "" + contextPath + "/" + contestCode + "/problem/" + problemCode + "/attempts-data";
    return $http.get(url).success(function(data) {
      return $scope.submissions = data;
    }).error(function() {})["finally"](function() {
      return $scope.dataLoaded = true;
    });
  };
  $scope.$on('addSubmission', function(event, submission) {
    return $scope.$apply(function() {
      var index;
      if (submission.judged) {
        index = problemService.getSubmissionIndex($scope.submissions, submission);
        if (index === -1) {
          return $scope.submissions.unshift(submission);
        } else {
          return $scope.submissions[index] = submission;
        }
      } else {
        return $scope.submissions.unshift(submission);
      }
    });
  });
  $scope.formatTime = formatContestTime;
  return $scope.calcProgressPercentage = function(submission) {
    if ((submission.testcases != null) && submission.testcases > 0) {
      return Math.round(100 * submission.passed / submission.testcases);
    }
    return 0;
  };
});

problemApp.controller('problemTeamsCtrl', function($scope, $rootScope, $http, problemService) {
  var createJudgementDetail, createTeamFromSubmission;
  $scope.dataLoaded = false;
  $scope.teams = [];
  $scope.init = function(contextPath, contestCode, problemCode) {
    var url;
    $rootScope.activeTab = 'teams';
    url = "" + contextPath + "/" + contestCode + "/problem/" + problemCode + "/attempts-data";
    return $http.get(url).success(function(submissions) {
      var i, submission, teamsObject, _i, _ref;
      if (submissions.length > 0) {
        teamsObject = {};
        for (i = _i = 0, _ref = submissions.length - 1; _i <= _ref; i = _i += 1) {
          submission = submissions[i];
          createJudgementDetail(submission);
          if (teamsObject[submission.teamExternalId] == null) {
            teamsObject[submission.teamExternalId] = createTeamFromSubmission(submission);
          }
          if (!teamsObject[submission.teamExternalId].solved) {
            teamsObject[submission.teamExternalId].solved = submission.solved;
          }
          teamsObject[submission.teamExternalId].submissions.push(submission);
        }
        return $scope.teams = Object.keys(teamsObject).map(function(key) {
          return teamsObject[key];
        });
      }
    }).error(function() {})["finally"](function() {
      return $scope.dataLoaded = true;
    });
  };
  $scope.$on('addSubmission', function(event, submission) {
    return $scope.$apply(function() {
      var i, index, team, teamIndex, _i, _ref;
      createJudgementDetail(submission);
      teamIndex = -1;
      if ($scope.teams.length > 0) {
        for (i = _i = 0, _ref = $scope.teams.length - 1; _i <= _ref; i = _i += 1) {
          if ($scope.teams[i].teamExternalId === submission.teamExternalId) {
            teamIndex = i;
          }
        }
      }
      if (teamIndex === -1) {
        team = createTeamFromSubmission(submission);
        team.submissions.push(submission);
        return $scope.teams.push(team);
      } else {
        if (!$scope.teams[teamIndex].solved) {
          $scope.teams[teamIndex].solved = submission.solved;
        }
        index = problemService.getSubmissionIndex($scope.teams[teamIndex].submissions, submission);
        if (index === -1) {
          return $scope.teams[teamIndex].submissions.unshift(submission);
        } else {
          return $scope.teams[teamIndex].submissions[index] = submission;
        }
      }
    });
  });
  $scope.formatTime = formatContestTime;
  createJudgementDetail = function(submission) {
    var judgement;
    if (submission != null) {
      judgement = $rootScope.judgements[submission.judgement];
      if (judgement != null) {
        submission.judgementName = judgement.name;
        return submission.judgementColor = judgement.color;
      }
    }
  };
  return createTeamFromSubmission = function(submission) {
    return {
      teamExternalId: submission.teamExternalId,
      teamName: submission.teamName,
      submissions: [],
      solved: submission.solved
    };
  };
});

problemApp.controller('problemOverviewCtrl', function($scope, $rootScope, $http, problemService) {
  var format;
  $scope.dataLoaded = false;
  $scope.data = [];
  $scope.init = function(contextPath, contestCode, problemCode) {
    var url;
    $rootScope.activeTab = 'overview';
    url = "" + contextPath + "/" + contestCode + "/problem/" + problemCode + "/overview-data";
    return $http.get(url).success(function(data) {
      return $scope.data = [
        {
          "key": "Passed tests",
          "color": '#5cb85c',
          "values": data
        }
      ];
    }).error(function() {})["finally"](function() {
      return $scope.dataLoaded = true;
    });
  };
  $scope.$on('addSubmission', function(event, submission) {
    return $scope.$apply(function() {
      var i, index, _i, _ref;
      if (submission.judged) {
        index = -1;
        console.log($scope.data[0]);
        if ($scope.data[0].values.length > 0) {
          for (i = _i = 0, _ref = $scope.data[0].values.length - 1; _i <= _ref; i = _i += 1) {
            if ($scope.data[0].values[i][0].teamExternalId === submission.teamExternalId) {
              index = i;
              break;
            }
          }
        }
        return $scope.data[0].values[i][1] = submission;
      }
    });
  });
  $scope.xFunction = function() {
    return function(d) {
      return d[0].teamName;
    };
  };
  $scope.yFunction = function() {
    return function(d) {
      return d[1].passed;
    };
  };
  format = d3.format(',.0f');
  $scope.valueFormatFunction = function() {
    return function(d) {
      return format(d);
    };
  };
  return $scope.toolTipContentFunction = function() {
    return function(key, x, y, e, graph) {
      var d;
      d = e.point[1];
      return ("<strong>" + x + "</strong><br/>") + ("Time: " + (formatContestTime(d.time)) + "<br/>") + ("Language:&nbsp;" + d.language + "<br/>") + ("Judgement: " + d.judgement);
    };
  };
});

updateProblemView = function(data, ngController) {
  return ngController.addTeamSubmission(data);
};

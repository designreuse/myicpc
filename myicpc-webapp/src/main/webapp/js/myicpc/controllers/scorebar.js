// Generated by CoffeeScript 1.8.0
var scorebar, scorebarDisplayText, scorebarHideText, sortTeamRanks, updateScorebar;

scorebar = angular.module('scorebar', []);

scorebar.controller('scorebarCtrl', function($scope) {
  $scope.teams = {};
  $scope.problemCount = 0;
  $scope.teamCount = 0;
  $scope.config = {
    barSize: 6,
    bigBarSize: 15,
    bigBarCount: 12,
    infoBoxOffset: 10,
    titleSpace: 5,
    tickSize: 7,
    tickPad: 15,
    legendTickYOffset: 10,
    barlegendSize: 30,
    barLegendY: 7,
    barLegendYText: 15,
    barLegendBeforText: 10,
    barLegendTextWidth: 90,
    animationTime: 1000,
    textStayAfterUp: 3000,
    teamNameOffset: 270,
    useLongNames: true,
    problemBarSize: 0,
    zeroBar: 5,
    space: 1
  };
  $scope.init = function(teams, teamCount, problemCount) {
    return $scope.$apply(function() {
      $scope.teams = teams;
      $scope.problemCount = problemCount;
      return $scope.teamCount = teamCount;
    });
  };

  /*
    Render the whole scorebar chart
  
    @param width the width of chart for responsive purposes
   */
  $scope.render = function(width) {
    var chartWidth, height, team, _i, _len, _ref, _results;
    if (width > 650) {
      $scope.config.useLongNames = true;
      $scope.config.teamNameOffset = 270;
    } else {
      $scope.config.useLongNames = false;
      $scope.config.teamNameOffset = 120;
    }
    chartWidth = width - $scope.config.teamNameOffset;
    $scope.config.problemBarSize = (chartWidth - $scope.config.space - 2 * $scope.config.zeroBar) / $scope.problemCount;
    height = $scope.config.bigBarCount * ($scope.config.bigBarSize + $scope.config.space) + ($scope.teamCount - $scope.config.bigBarCount) * ($scope.config.barSize + $scope.config.space) + 60;
    d3.select("#scorebar-chart svg").attr("width", width).attr("height", height).style("width", width).style("height", height);
    $scope.drawLegend(width);
    $scope.drawXAxis(chartWidth);
    _ref = $scope.teams;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      team = _ref[_i];
      _results.push($scope.drawTeamBar(team));
    }
    return _results;
  };

  /*
    Draw scorebar legend
   */
  $scope.drawLegend = function(width) {
    var legend, legendHeight;
    legendHeight = 18;
    legend = d3.select("#scorebar-legend g.canvas").attr("width", width).attr("height", legendHeight).style("width", width).style("height", legendHeight);
    legend.append("rect").attr("y", $scope.config.barLegendY).attr("width", $scope.config.barlegendSize).attr("height", $scope.config.barSize).attr("class", "passed");
    legend.append("rect").attr("y", $scope.config.barLegendY).attr("width", $scope.config.barlegendSize).attr("x", $scope.config.barlegendSize + $scope.config.barLegendBeforText + $scope.config.barLegendTextWidth).attr("height", $scope.config.barSize).attr("class", "failed");
    legend.append("text").attr("x", $scope.config.barlegendSize + $scope.config.barLegendBeforText).attr("y", $scope.config.barLegendYText).attr("text-anchor", "start").attr("class", "legend-label").text("# solved");
    return legend.append("text").attr("x", 2 * $scope.config.barlegendSize + 2 * $scope.config.barLegendBeforText + $scope.config.barLegendTextWidth).attr("y", $scope.config.barLegendYText).attr("text-anchor", "start").attr("class", "legend-label").text("# failed");
  };

  /*
    Render the x-axis with number of problems
   */
  $scope.drawXAxis = function(chartWidth) {
    var axis, i, ticks, _i, _ref;
    axis = d3.select("#scorebar-chart svg g.axis-canvas");
    axis.attr("transform", "translate(" + $scope.config.teamNameOffset + ",0)");
    ticks = [];
    for (i = _i = 0, _ref = $scope.problemCount; _i <= _ref; i = _i += 1) {
      ticks[i] = i;
    }
    axis.append("line").attr("x1", $scope.config.zeroBar).attr("x2", chartWidth - $scope.config.zeroBar).attr("y1", $scope.config.tickPad).attr("y2", $scope.config.tickPad).attr("stroke", "#000");
    axis.selectAll(".axis-tick").data(ticks).attr("y1", $scope.config.tickPad).attr("y2", $scope.config.tickSize + $scope.config.tickPad).attr("x1", $scope._placeAxisLabel).attr("x2", $scope._placeAxisLabel).attr("stroke", "#000").attr("class", "axis-tick").enter().append("line").attr("y1", $scope.config.tickPad).attr("y2", $scope.config.tickSize + $scope.config.tickPad).attr("x1", $scope._placeAxisLabel).attr("x2", $scope._placeAxisLabel).attr("stroke", "#000").attr("class", "axis-tick");
    return axis.selectAll(".tick-label").data(ticks).attr("x", $scope._placeAxisLabel).attr("y", $scope.config.legendTickYOffset).attr("text-anchor", "middle").attr("class", "tick-label").text(String).enter().append("text").attr("x", $scope._placeAxisLabel).attr("y", $scope.config.legendTickYOffset).attr("text-anchor", "middle").attr("class", "tick-label").text(String);
  };
  $scope._placeAxisLabel = function(d) {
    return $scope.config.zeroBar + d * $scope.config.problemBarSize;
  };
  $scope._getTeamY = function(team) {
    if (team.rank <= $scope.config.bigBarCount) {
      return team.rank * ($scope.config.bigBarSize + 1);
    } else {
      return ($scope.config.bigBarCount * ($scope.config.bigBarSize + 1)) + ((team.rank - $scope.config.bigBarCount + 1) * ($scope.config.barSize + 1) + 2);
    }
  };
  $scope._getTeamX = function(team) {
    return $scope.config.zeroBar + (team.solvedNum + team.failedNum) * $scope.config.problemBarSize + $scope.config.teamNameOffset + $scope.config.infoBoxOffset;
  };
  $scope.updateTeamInfo = function(team) {
    var $infoteam, $infoteamfailed, $infoteamrank, $infoteamsolved, formatProblemArray;
    $infoteam = $("#info-" + team.teamId);
    if ($infoteam.length) {
      $infoteam.css({
        top: $scope._getTeamY(team) + "px",
        left: $scope._getTeamX(team) + "px"
      });
    }
    $infoteamrank = $("#info-" + team.teamId + "-rank");
    if ($infoteamrank.length) {
      $infoteamrank.html(team.rank);
    }
    formatProblemArray = function(letters) {
      var str;
      str = letters.join(", ");
      if (str.length > 0) {
        str = "(" + str + ")";
      }
      return str;
    };
    $infoteamsolved = $("#info-" + team.teamId + "-solved");
    if ($infoteamsolved.length) {
      $infoteamsolved.html(team.solvedNum + " " + formatProblemArray(team.solved));
    }
    $infoteamfailed = $("#info-" + team.teamId + "-failed");
    if ($infoteamfailed.length) {
      return $infoteamfailed.html(team.failedNum + " " + formatProblemArray(team.failed));
    }
  };
  $scope.drawTeamBar = function(team) {
    var chart, f, failedSpace, fshorter, getHeight, getTextClass, getyText, movedUp, n, nextY, p, previousY, t1, t2, trf, trn, trp, tt;
    chart = d3.select("#scorebar-chart g.canvas");
    n = chart.selectAll("#neutrl-bar" + team["teamId"]).data([team]);
    getHeight = function(team) {
      if (team.rank <= $scope.config.bigBarCount) {
        return $scope.config.bigBarSize;
      } else {
        return $scope.config.barSize;
      }
    };
    previousY = $("#passed-bar" + team["teamId"]).attr("y");
    nextY = $scope._getTeamY(team, 0);
    movedUp = false;
    if (previousY > nextY && team.solvedNum > 0) {
      movedUp = true;
    }
    trn = n.transition().delay($scope.config.animationTime).duration($scope.config.animationTime).attr("height", getHeight).attr("y", $scope._getTeamY);
    n.enter().append("rect").attr("y", $scope._getTeamY).attr("width", function(d) {
      return $scope.config.zeroBar;
    }).attr("height", getHeight).attr("class", "neutral").attr("id", function(d, i) {
      return "neutrl-bar" + d["teamId"];
    }).attr("onmouseover", "scorebarDisplayText(this);").attr("onmouseout", "scorebarHideTextHideText(this);");
    p = chart.selectAll("#passed-bar" + team["teamId"]).data([team]);
    trp = p.transition().duration($scope.config.animationTime).attr("width", function(d) {
      return d["solvedNum"] * $scope.config.problemBarSize;
    });
    if (movedUp) {
      trp = trp.style("fill", "palegreen");
    }
    trp = trp.transition().delay($scope.config.animationTime).duration($scope.config.animationTime).attr("height", getHeight).attr("y", $scope._getTeamY);
    if (movedUp) {
      trp = trp.transition().delay(2 * $scope.config.animationTime + $scope.config.textStayAfterUp);
    } else {
      trp = trp.transition().delay(2 * $scope.config.animationTime);
    }
    trp.style("fill", "").attr("width", function(d) {
      return d["solvedNum"] * $scope.config.problemBarSize;
    }).attr("height", getHeight).attr("y", $scope._getTeamY);
    p.enter().append("rect").attr("y", $scope._getTeamY).attr("width", function(d) {
      return d["solvedNum"] * $scope.config.problemBarSize;
    }).attr("x", $scope.config.zeroBar + $scope.config.space).attr("height", getHeight).attr("class", "passed").attr("id", function(d, i) {
      return "passed-bar" + d["teamId"];
    }).attr("onmouseover", "scorebarDisplayText(this);").attr("onmouseout", "scorebarHideText(this);");
    failedSpace = 2 * $scope.config.space;
    fshorter = 0;
    if (team.solvedNum === 0) {
      failedSpace = $scope.config.space;
    } else if (team.failedNum > 0) {
      fshorter = 1;
    }
    f = chart.selectAll("#failed-bar" + team["teamId"]).data([team]);
    trf = f.transition().duration($scope.config.animationTime).attr("x", function(d, i) {
      return $scope.config.zeroBar + d["solvedNum"] * $scope.config.problemBarSize + failedSpace;
    }).attr("width", function(d) {
      return d["failedNum"] * $scope.config.problemBarSize - fshorter;
    });
    if (movedUp) {
      trf = trf.style("fill", "salmon");
    }
    trf = trf.transition().delay($scope.config.animationTime).duration($scope.config.animationTime).attr("y", $scope._getTeamY).attr("height", getHeight);
    if (movedUp) {
      trf = trf.transition().delay(2 * $scope.config.animationTime + $scope.config.textStayAfterUp);
    } else {
      trf = trf.transition().delay(2 * $scope.config.animationTime);
    }
    trf.style("fill", "").attr("x", function(d, i) {
      return $scope.config.zeroBar + d["solvedNum"] * $scope.config.problemBarSize + failedSpace;
    }).attr("width", function(d) {
      return d["failedNum"] * $scope.config.problemBarSize - fshorter;
    }).attr("y", $scope._getTeamY).attr("height", getHeight);
    f.enter().append("rect").attr("y", $scope._getTeamY).attr("x", function(d, i) {
      return $scope.config.zeroBar + d["solvedNum"] * $scope.config.problemBarSize + failedSpace;
    }).attr("width", function(d) {
      return d["failedNum"] * $scope.config.problemBarSize - fshorter;
    }).attr("height", getHeight).attr("id", function(d, i) {
      return "failed-bar" + d["teamId"];
    }).attr("class", "failed").on("mouseover", function(team) {}).attr("onmouseout", "scorebarHideText(this);");
    getTextClass = function(team, i) {
      if (team.rank <= $scope.config.bigBarCount) {
        return "bar-title-Visible";
      } else {
        return "bar-title-Hidden";
      }
    };
    getyText = function(team, i) {
      return $scope._getTeamY(team, i) + $scope.config.bigBarSize - 3;
    };
    tt = chart.selectAll("#bar-Ntitle" + team["teamId"]).data([team]);
    t1 = tt.transition().duration($scope.config.animationTime);
    t2 = t1.transition().delay($scope.config.animationTime).duration($scope.config.animationTime).attr("y", getyText);
    if (movedUp) {
      t1 = t1.attr("class", "bar-title-Visible");
    }
    if (movedUp && (team.rank > $scope.config.bigBarCount)) {
      t2 = t2.transition().delay($scope.config.textStayAfterUp + 2 * $scope.config.animationTime);
    } else {
      t2 = t2.transition().delay(2 * $scope.config.animationTime);
    }
    t2.attr("class", getTextClass);
    return tt.enter().append("text").attr("text-anchor", "end").attr("y", getyText).attr("x", -$scope.config.titleSpace).attr("id", function(team, i) {
      return "bar-Ntitle" + team["teamId"];
    }).attr("class", getTextClass).text(function(team) {
      if ($scope.config.useLongNames) {
        return team.teamShortName;
      } else {
        return team.teamAbbreviation;
      }
    }).attr("onmouseover", "scorebarDisplayText(this);").attr("onmouseout", "scorebarHideText(this);");
  };
  $scope.findById = function(teamId) {
    return _.find($scope.teams, function(obj) {
      return obj.teamId === teamId;
    });
  };
  return $scope.sortTeams = function(sortFunc, team) {
    var arr;
    console.log($scope.teams);
    arr = $scope.teams.slice(team.teamRank - 1, team.rank + 1);
    arr = sortFunc(arr, team['teamRank'] - 1);
    console.log(team);
    console.log(arr);
    console.log($scope.teams);
    return arr;
  };
});

scorebarDisplayText = function(element) {
  var s;
  s = element.id.substring(10);
  d3.select("#passed-bar" + s).attr("class", "barhover");
  d3.select("#failed-bar" + s).attr("class", "barhover");
  d3.select("#neutrl-bar" + s).attr("class", "barhover");
  d3.select("#workon-bar" + s).attr("class", "barhover");
  d3.select("#bar-Ntitle" + s).style("fill", "blue");
  return d3.select("#info-" + s).attr("class", "teamInfoVisible");
};

scorebarHideText = function(element) {
  var s;
  s = element.id.substring(10);
  d3.select("#passed-bar" + s).attr("class", "passed");
  d3.select("#failed-bar" + s).attr("class", "failed");
  d3.select("#neutrl-bar" + s).attr("class", "neutral");
  d3.select("#workon-bar" + s).attr("class", "workon");
  d3.select("#bar-Ntitle" + s).style("fill", "black");
  return d3.select(".teamInfoVisible").attr("class", "teamInfoHidden");
};

sortTeamRanks = function(teams, offset) {
  var i, _i, _ref;
  if (offset == null) {
    offset = 0;
  }
  if (teams.length === 0) {
    return teams;
  }
  teams.sort(function(t1, t2) {
    if (t1.teamRank === t2.teamRank) {
      return t1.teamShortName.localeCompare(t2.teamShortName);
    } else {
      return t1.teamRank - t2.teamRank;
    }
  });
  for (i = _i = 0, _ref = teams.length - 1; _i <= _ref; i = _i += 1) {
    teams[i].rank = i + 1 + offset;
  }
  return teams;
};

updateScorebar = function(data, ngController) {
  var effectedTeam, effectedTeams, i, index, key, team, teamId, _i, _ref;
  if (ngController == null) {
    ngController = null;
  }
  if (data.type === 'submission') {
    if (ngController !== null) {
      team = ngController.findById(data["teamId"]);
      if (data.solved) {
        if (team.solved.indexOf(data["problemCode"]) === -1) {
          team.solvedNum += 1;
          team.solved.push(data["problemCode"]);
          index = team.failed.indexOf(data["problemCode"]);
          if (index !== -1) {
            team.failedNum -= 1;
            team.failed.splice(index, 1);
          }
        }
      } else if (team.failed.indexOf(data["problemCode"]) === -1) {
        team.failedNum += 1;
        team.failed.push(data["problemCode"]);
      }
      if (data.judged && data.solved) {
        for (key in data.teams) {
          teamId = parseInt(key);
          effectedTeam = ngController.findById(teamId);
          effectedTeam.teamRank = data.teams[key].teamRank;
        }
        effectedTeams = ngController.sortTeams(sortTeamRanks, team);
        console.log(effectedTeams.length);
        for (i = _i = 0, _ref = effectedTeams.length - 1; _i <= _ref; i = _i += 1) {
          ngController.drawTeamBar(effectedTeams[i]);
          ngController.updateTeamInfo(effectedTeams[i]);
        }
      }
      ngController.drawTeamBar(team);
      return ngController.updateTeamInfo(team);
    }
  }
};

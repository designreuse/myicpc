// Generated by CoffeeScript 1.8.0
var barChartType, initCommonFunctions, pieChartType, pollApp, updatePollView;

pollApp = angular.module('poll', ['ngRoute', 'nvd3ChartDirectives']);

pieChartType = 'PIE_CHART';

barChartType = 'BAR_CHART';

pollApp.config([
  '$routeProvider', function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'poll/overview-template',
      controller: 'allPollsCtrl'
    }).when('/:pollId', {
      templateUrl: 'poll/detail-template',
      controller: 'pollDetailCtrl'
    }).otherwise({
      redirectTo: '/'
    });
  }
]);

pollApp.factory('pollService', function($http) {
  var format, pollService;
  pollService = {};
  pollService.countPollAnsweredOptions = function(poll) {
    if (pollService.isPieChart(poll)) {
      return 0;
    } else if (pollService.isBarChart(poll)) {
      if (poll.chart.length > 0) {
        return poll.chart[0].values.length;
      }
    }
  };
  pollService.isPieChart = function(poll) {
    return poll.type === pieChartType;
  };
  pollService.isBarChart = function(poll) {
    return poll.type === barChartType;
  };
  pollService.sortChartOptions = function(poll) {
    if (pollService.isPieChart(poll)) {
      poll.chart = _.sortBy(poll.chart, function(obj) {
        return obj.value * -1;
      });
    } else if (pollService.isBarChart(poll)) {
      poll.chart[0].values = _.sortBy(poll.chart[0].values, function(obj) {
        return obj.value * -1;
      });
    }
    return poll.chart;
  };
  pollService.xFunction = function() {
    return function(d) {
      return d.name;
    };
  };
  pollService.xFunctionShort = function() {
    return function(d) {
      return d.name.substring(0, 25);
    };
  };
  pollService.yFunction = function() {
    return function(d) {
      return d.value;
    };
  };
  pollService.yAxisTickFormatFunction = function() {
    return function(d) {
      if (d % 1 === 0) {
        return d;
      } else {
        return '';
      }
    };
  };
  pollService.pieToolTipContent = function() {
    return function(key, x, y, e, graph) {
      return '<strong>' + key + ' (' + y.value + ')</strong>';
    };
  };
  format = d3.format(',f');
  pollService.valueFormatFunction = function() {
    return function(d) {
      return format(d);
    };
  };
  pollService.toolTipContentFunction = function() {
    return function(key, x, y, e, graph) {
      return '<strong>' + e.point.name + '</strong>';
    };
  };
  pollService.toolTipContentFunctionMobile = function() {
    return function(key, x, y, e, graph) {
      return '<strong>' + x + ' (' + format(y) + ')</strong>';
    };
  };
  return pollService;
});

pollApp.controller('pollsCtrl', function($scope, $rootScope, $http, pollService) {
  $rootScope.polls = [];
  $scope.init = function(contextPath, contestCode, data) {
    return $rootScope.$apply(function() {
      $rootScope.polls = data;
      $rootScope.contextPath = contextPath;
      return $rootScope.contestCode = contestCode;
    });
  };
  $scope.update = function(data) {
    return $rootScope.$apply(function() {
      var option, poll;
      poll = _.find($rootScope.polls, function(p) {
        return p.id === data.pollId;
      });
      console.log(poll);
      if (poll != null) {
        if (pollService.isPieChart(poll)) {
          option = _.find(poll.chart, function(o) {
            return o.key === data.optionId;
          });
          if (option != null) {
            return option.value = data.votes;
          } else {
            return poll.chart.push({
              key: data.optionId,
              name: data.optionName,
              value: data.votes
            });
          }
        } else if (pollService.isBarChart(poll)) {
          option = _.find(poll.chart[0].values, function(o) {
            return o.key === data.optionId;
          });
          if (option != null) {
            return option.value = data.votes;
          } else {
            return poll.chart[0].values.push({
              key: data.optionId,
              name: data.optionName,
              value: data.votes
            });
          }
        }
      }
    });
  };
  return $rootScope.submitAnswer = function(pollId, optionId) {
    return $http.post("" + $rootScope.contextPath + "/" + $rootScope.contestCode + "/poll/submit-answer", {}, {
      params: {
        pollId: pollId,
        optionId: optionId
      }
    }).success(function() {
      var poll;
      poll = _.find($rootScope.polls, function(p) {
        return p.id === pollId;
      });
      if (poll != null) {
        return poll.answered = true;
      }
    });
  };
});

pollApp.controller('allPollsCtrl', function($scope, $rootScope, pollService) {
  return initCommonFunctions($scope, pollService);
});

pollApp.controller('pollDetailCtrl', function($scope, $rootScope, $routeParams, pollService) {
  $scope.poll = {};
  $scope.pollIndex = -1;
  $scope.init = function() {
    var i, pollId, _i, _ref, _results;
    if ($rootScope.polls.length > 0) {
      pollId = parseInt($routeParams.pollId);
      _results = [];
      for (i = _i = 0, _ref = $rootScope.polls.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ($rootScope.polls[i].id === pollId) {
          $scope.pollIndex = i;
          $scope.poll = $rootScope.polls[$scope.pollIndex];
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };
  initCommonFunctions($scope, pollService);
  return $scope.selectOptions = function(poll) {
    if (pollService.isPieChart(poll)) {
      return poll.chart;
    } else if (pollService.isBarChart(poll)) {
      if (poll.chart.length > 0) {
        return poll.chart[0].values;
      }
    }
    return [];
  };
});

initCommonFunctions = function($scope, pollService) {
  $scope.xFunction = pollService.xFunction;
  $scope.xFunctionShort = pollService.xFunctionShort;
  $scope.yFunction = pollService.yFunction;
  $scope.yAxisTickFormatFunction = pollService.yAxisTickFormatFunction;
  $scope.pieToolTipContent = pollService.pieToolTipContent;
  $scope.valueFormatFunction = pollService.valueFormatFunction;
  $scope.toolTipContentFunction = pollService.toolTipContentFunction;
  $scope.toolTipContentFunctionMobile = pollService.toolTipContentFunctionMobile;
  $scope.countPollAnsweredOptions = pollService.countPollAnsweredOptions;
  $scope.sortChartOptions = pollService.sortChartOptions;
  $scope.isPieChart = pollService.isPieChart;
  return $scope.isBarChart = pollService.isBarChart;
};

updatePollView = function(data, ngController) {
  return ngController.update(data);
};

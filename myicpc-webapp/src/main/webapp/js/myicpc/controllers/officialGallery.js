// Generated by CoffeeScript 1.8.0
var OfficialGalleryConstants, officialGalleryApp;

officialGalleryApp = angular.module('officialGallery', []);

OfficialGalleryConstants = {
  delimiter: ', ',
  eventPrefix: "event",
  teamPrefix: "team",
  personPrefix: "person"
};

officialGalleryApp.factory('officialGalleryService', function($http, $interval) {
  var appendTagsToEntity, officialGalleryAppService, sanitizeTag;
  officialGalleryAppService = {};
  officialGalleryAppService.buildSearchUrl = function(config, tag, start) {
    if (start == null) {
      start = 1;
    }
    if (start < 1) {
      start = 1;
    }
    return ("http://picasaweb.google.com/data/feed/api/user/" + config.picasaUser + "/?kind=photo&q=Album" + config.year + "%20\"" + tag + "\"&") + ("start-index=" + start + "&max-results=" + config.maxResult + "&thumbsize=" + config.thumbsize + "c&imgmax=512&alt=json");
  };
  officialGalleryAppService.buildCountUrl = function(config, tag) {
    return ("http://picasaweb.google.com/data/feed/api/user/" + config.picasaUser + "/?fields=openSearch:totalResults&") + ("kind=photo&q=Album" + config.year + "%20\"" + tag + "\"&start-index=1&max-results=1000&access=public&alt=json");
  };
  officialGalleryAppService.transformToGalleryEntities = function(picasaResponse) {
    var entries, entry, i, result, results, _i, _ref;
    if (picasaResponse.feed.entry != null) {
      results = [];
      entries = picasaResponse.feed.entry;
      if (entries.length > 0) {
        for (i = _i = 0, _ref = entries.length - 1; _i <= _ref; i = _i += 1) {
          entry = entries[i];
          result = {};
          result.imageUrl = entry['media$group']['media$content'][0].url;
          result.thumbnailUrl = entry['media$group']['media$thumbnail'][0].url;
          result.author = entry['media$group']['media$description']['$t'];
          appendTagsToEntity(result, entry);
          results.push(result);
        }
      }
      return results;
    }
    return [];
  };
  appendTagsToEntity = function(entity, entry) {
    var i, keywords, token, tokens, _i, _ref, _results;
    entity.events = [];
    entity.teams = [];
    entity.people = [];
    keywords = entry['media$group']['media$keywords']['$t'];
    tokens = keywords.split(OfficialGalleryConstants.delimiter);
    if (tokens.length > 0) {
      _results = [];
      for (i = _i = 0, _ref = tokens.length - 1; _i <= _ref; i = _i += 1) {
        token = tokens[i].trim();
        if (officialGalleryAppService.tagPrefix(token) === OfficialGalleryConstants.eventPrefix) {
          _results.push(entity.events.push(sanitizeTag(token, OfficialGalleryConstants.eventPrefix)));
        } else if (officialGalleryAppService.tagPrefix(token) === OfficialGalleryConstants.teamPrefix) {
          _results.push(entity.teams.push(sanitizeTag(token, OfficialGalleryConstants.teamPrefix)));
        } else {
          _results.push(entity.people.push(sanitizeTag(token, OfficialGalleryConstants.personPrefix)));
        }
      }
      return _results;
    }
  };

  /*
   * Remove tag prefix and suffix if necessary
   */
  sanitizeTag = function(tag, tagPrefix) {
    if (tagPrefix === OfficialGalleryConstants.eventPrefix || tagPrefix === OfficialGalleryConstants.teamPrefix) {
      tag = tag.substr(tagPrefix.length + 1, tag.length);
    }
    if (tagPrefix === OfficialGalleryConstants.personPrefix && tag.indexOf('(') !== -1) {
      tag = tag.substr(0, tag.indexOf('('));
    }
    return tag;
  };

  /*
   * Decide, which prefix tag has if any
   * @return identified tag
   */
  officialGalleryAppService.tagPrefix = function(tag) {
    tag = tag.trim();
    if (tag.substr(0, OfficialGalleryConstants.eventPrefix.length) === OfficialGalleryConstants.eventPrefix) {
      return OfficialGalleryConstants.eventPrefix;
    } else if (tag.substr(0, OfficialGalleryConstants.teamPrefix.length) === OfficialGalleryConstants.teamPrefix) {
      return OfficialGalleryConstants.teamPrefix;
    } else {
      return OfficialGalleryConstants.personPrefix;
    }
  };
  return officialGalleryAppService;
});

officialGalleryApp.controller('officialGalleryCtrl', function($scope, $http, $location, officialGalleryService) {
  var appendResultToPhotos, getInitPhotos, getPhotos, processHashtag;
  $scope.photos = [];
  $scope.currentPhoto = {};
  $scope.currentIndex = 0;
  $scope.maxResult = 0;
  $scope.currentTag = OfficialGalleryConstants.eventPrefix + "$Photo Tour";
  $scope.currentEvent = "Photo Tour";
  $scope.currentTeam = "";
  $scope.currentPerson = "";
  $scope.config = {
    year: 2013,
    maxResult: 30,
    thumbsize: 288,
    imgmax: 512,
    picasaUser: 'hq.icpc',
    albumPrefix: 'Album'
  };
  $scope.eventFilterChanged = function() {
    return $scope.searchEvent($scope.currentEvent);
  };
  $scope.searchEvent = function(eventName) {
    var tag;
    $scope.currentEvent = eventName;
    $scope.currentTeam = "";
    $scope.currentPerson = "";
    if (eventName.length > 0) {
      tag = OfficialGalleryConstants.eventPrefix + "$" + eventName;
      $scope.currentTag = tag;
      return getInitPhotos(tag);
    }
  };
  $scope.teamFilterChanged = function() {
    return $scope.searchTeam($scope.currentTeam);
  };
  $scope.searchTeam = function(teamName) {
    var tag;
    $scope.currentEvent = "";
    $scope.currentTeam = teamName;
    $scope.currentPerson = "";
    if (teamName.length > 0) {
      tag = $scope.currentTag = OfficialGalleryConstants.teamPrefix + "$" + teamName;
      return getInitPhotos(tag);
    }
  };
  $scope.peopleFilterChanged = function() {
    return $scope.searchPeople($scope.currentPerson);
  };
  $scope.searchPeople = function(personName) {
    var tag;
    $scope.currentEvent = "";
    $scope.currentTeam = "";
    if (personName.length > 0) {
      tag = $scope.currentTag = personName;
      return getInitPhotos(tag);
    }
  };
  $scope.loadMore = function(onSuccess) {
    console.log($scope.currentTag);
    if ($scope.photos.length < $scope.maxResult) {
      getPhotos($scope.currentTag, $scope.photos.length + 1, onSuccess);
    } else {
      $(".load-more-btn").addClass('hidden');
    }
  };
  getInitPhotos = function(tag) {
    $scope.photos.length = 0;
    $('#galleryPopup').modal('hide');
    $(".load-more-btn").removeClass('hidden');
    $location.path(tag);
    return getPhotos(tag);
  };
  getPhotos = function(tag, start, onSuccess) {
    if (start == null) {
      start = 1;
    }
    if (onSuccess == null) {
      onSuccess = null;
    }
    return $http.get(officialGalleryService.buildSearchUrl($scope.config, tag, start)).success(function(data) {
      appendResultToPhotos(data);
      if (onSuccess != null) {
        return onSuccess();
      }
    });
  };
  appendResultToPhotos = function(data) {
    console.log(data);
    console.log(officialGalleryService.transformToGalleryEntities(data));
    $scope.photos = $scope.photos.concat(officialGalleryService.transformToGalleryEntities(data));
    $scope.maxResult = data.feed['openSearch$totalResults']['$t'];
    if ($scope.photos.length === $scope.maxResult) {
      $(".load-more-btn").addClass('hidden');
    }
  };
  $scope.showPhotoDetail = function(index) {
    $scope.currentPhoto = $scope.photos[index];
    $scope.currentIndex = index;
    return console.log($scope.currentPhoto);
  };
  $scope.previousPhoto = function() {
    var prevIndex;
    prevIndex = $scope.currentIndex - 1;
    if (prevIndex < 0) {
      $('#galleryPopup').modal('hide');
    } else {
      $scope.showPhotoDetail(prevIndex);
    }
    return null;
  };
  $scope.nextPhoto = function() {
    if ($scope.currentIndex + 1 >= $scope.maxResult) {
      $('#galleryPopup').modal('hide');
    } else if ($scope.currentIndex + 1 >= $scope.photos.length) {
      $scope.loadMore(function() {
        return $scope.showPhotoDetail($scope.currentIndex + 1);
      });
    } else {
      $scope.showPhotoDetail($scope.currentIndex + 1);
    }
    return null;
  };
  processHashtag = function() {
    var hash, tag, tagType;
    hash = $location.path();
    console.log(hash);
    tagType = null;
    tag = null;
    if ((hash != null) && hash.length > 0) {
      hash = hash.substr(1);
      tagType = officialGalleryService.tagPrefix(hash);
      if (tagType === OfficialGalleryConstants.eventPrefix || tagType === OfficialGalleryConstants.teamPrefix) {
        tag = hash.substr(tagType.length + 1);
      } else {
        tag = hash;
      }
      console.log(tag);
      if (tag != null) {
        if (tagType === OfficialGalleryConstants.eventPrefix) {
          $scope.currentEvent = $scope.currentTag = tag;
          return $scope.searchEvent($scope.currentEvent);
        } else if (tagType === OfficialGalleryConstants.teamPrefix) {
          $scope.currentTeam = $scope.currentTag = tag;
          return $scope.searchTeam($scope.currentTeam);
        } else {
          $scope.currentPerson = $scope.currentTag = tag;
          return $scope.searchPeople($scope.currentPerson);
        }
      }
    } else {
      return $scope.searchEvent($scope.currentEvent);
    }
  };
  return processHashtag();
});

// Generated by CoffeeScript 1.8.0
var Timeline, timeline, updateTimeline, videoAutoplayOnScroll;

timeline = angular.module('timeline', []);

timeline.controller('timelineCtrl', function($scope) {});

Timeline = {
  pendingNotificationsCount: 0,
  translations: {
    "timeline.pendingNotifications": "You have ",
    "timeline.pendingNotifications.one": " new notification",
    "timeline.pendingNotifications.other": " new notifications"
  },
  handlerMapping: {},
  ignoreScrolling: false,
  lastTimelineIdLoaded: null,
  init: function() {
    var timelineAdminNotificationTemplate, timelineAnalystTeamTemplate, timelineAnalystTemplate, timelineEventOpenNotificationTemplate, timelineInstagramTemplate, timelineOfficialGalleryTemplate, timelinePicasaTemplate, timelineQuestChallengeTemplate, timelineScoreboardTemplate, timelineTwitterTemplate, timelineVineTemplate;
    timelineScoreboardTemplate = compileHandlebarsTemplate("timeline-SCOREBOARD_SUCCESS");
    timelineAnalystTeamTemplate = compileHandlebarsTemplate("timeline-ANALYST_TEAM_MESSAGE");
    timelineAnalystTemplate = compileHandlebarsTemplate("timeline-ANALYST_MESSAGE");
    timelineTwitterTemplate = compileHandlebarsTemplate("timeline-TWITTER");
    timelineInstagramTemplate = compileHandlebarsTemplate("timeline-INSTAGRAM");
    timelineVineTemplate = compileHandlebarsTemplate("timeline-VINE");
    timelinePicasaTemplate = compileHandlebarsTemplate("timeline-PICASA");
    timelineOfficialGalleryTemplate = compileHandlebarsTemplate("timeline-OFFICIAL_GALLERY");
    timelineQuestChallengeTemplate = compileHandlebarsTemplate("timeline-QUEST_CHALLENGE");
    timelineAdminNotificationTemplate = compileHandlebarsTemplate("timeline-ADMIN_NOTIFICATION");
    timelineEventOpenNotificationTemplate = compileHandlebarsTemplate("timeline-SCHEDULE_EVENT_OPEN");
    this.handlerMapping["submissionSuccess"] = function(notification) {
      return timelineScoreboardTemplate(notification);
    };
    this.handlerMapping["twitter"] = function(notification) {
      return timelineTwitterTemplate(notification);
    };
    this.handlerMapping["analystTeamMsg"] = function(notification) {
      return timelineAnalystTeamTemplate(notification);
    };
    this.handlerMapping["analystMsg"] = function(notification) {
      return timelineAnalystTemplate(notification);
    };
    this.handlerMapping["instagram"] = function(notification) {
      return timelineInstagramTemplate(notification);
    };
    this.handlerMapping["vine"] = function(notification) {
      return timelineVineTemplate(notification);
    };
    this.handlerMapping["picasa"] = function(notification) {
      return timelinePicasaTemplate(notification);
    };
    this.handlerMapping["gallery"] = function(notification) {
      return timelineOfficialGalleryTemplate(notification);
    };
    this.handlerMapping["questChallenge"] = function(notification) {
      return timelineQuestChallengeTemplate(notification);
    };
    this.handlerMapping["adminNotification"] = function(notification) {
      return timelineAdminNotificationTemplate(notification);
    };
    return this.handlerMapping["eventOpen"] = function(notification) {
      notification.body = $.parseJSON(notification.body);
      console.log(notification.body);
      return timelineEventOpenNotificationTemplate(notification);
    };
  },
  acceptFunction: function(data) {
    return true;
  },
  updateMainFeed: function(data) {
    var text;
    if (this.acceptFunction(data)) {
      if (this.ignoreScrolling || $(window).scrollTop() === 0) {
        return this.addNotificationToTimeline(data);
      } else {
        this.pendingNotificationsCount += 1;
        this.addNotificationToTimeline(data, {
          "hide": true
        });
        text = "";
        if (this.pendingNotificationsCount === 1) {
          text = "" + this.translations['timeline.pendingNotifications'] + " 1 " + this.translations['timeline.pendingNotifications.one'];
        } else {
          text = "" + this.translations['timeline.pendingNotifications'] + " " + this.pendingNotificationsCount + " " + this.translations['timeline.pendingNotifications.other'];
        }
        return $("#timeline-notification").html(text).removeClass("hidden");
      }
    }
  },
  displayPendingNotification: function() {
    if (this.pendingNotificationsCount > 0) {
      $("#timeline-body .timelineTile").removeClass("hidden");
      $("#timeline-body .timelineTile:lt(" + this.pendingNotificationsCount + ")").effect("highlight", {}, 800);
      this.pendingNotificationsCount = 0;
      return $("#timeline-notification").addClass("hidden");
    }
  },
  addNotificationToTimeline: function(notification, settings) {
    var elem, handler;
    settings = $.extend({
      'duration': 1500,
      'prepend': true,
      'hide': false,
      "featured": true
    }, settings);
    if (typeof notification.code === 'string') {
      notification.code = $.parseJSON(notification.code);
    }
    elem = null;
    handler = this.handlerMapping[notification.type];
    if ((handler != null)) {
      elem = handler(notification);
    }
    if (elem !== null) {
      if (settings.hide === true) {
        return $(elem).prependTo($("#timeline-body")).addClass("hidden");
      } else {
        if (settings.prepend === true) {
          if (settings.duration === 0) {
            return $(elem).hide().prependTo($("#timeline-body")).effect("highlight", {}, 800);
          } else {
            return $(elem).hide().prependTo($("#timeline-body")).slideDown(settings.duration).effect("highlight", {}, settings.duration);
          }
        } else {
          return $(elem).appendTo($("#timeline-body"));
        }
      }
    }
  },
  loadMorePosts: function(url) {
    return $.getJSON(url, {
      lastTimestamp: Timeline.lastTimelineIdLoaded
    }, function(object) {
      var data, i, _i, _ref;
      if ($.isEmptyObject(object)) {
        return $('#timeline .timeline-loading').addClass('hidden');
      } else {
        if (object.hasOwnProperty('lastTimelineId')) {
          Timeline.lastTimelineIdLoaded = object['lastTimelineId'];
        }
        data = object.data;
        for (i = _i = 0, _ref = data.length - 1; _i <= _ref; i = _i += 1) {
          Timeline.addNotificationToTimeline(data[i], {
            'prepend': false,
            "featured": false
          });
        }
        $('#timeline .timeline-loading').addClass('hidden');
        return setTimeout(function() {
          return $('#loadMoreTimeline').removeClass('hidden');
        }, 3000);
      }
    });
  }
};

updateTimeline = function(data, acceptFunction, ngController) {
  return Timeline.updateMainFeed(data, acceptFunction);
};

videoAutoplayOnScroll = function() {
  var firstPlaying;
  firstPlaying = false;
  $("video").each(function() {
    var video;
    video = this;
    if (isElementVisible(video, 40) && !firstPlaying) {
      firstPlaying = true;
      return video.play();
    } else {
      return video.pause();
    }
  });
};

$(window).scroll(function() {
  if ($(window).scrollTop() === $(document).height() - $(window).height() && $('#timeline .timeline-loading').hasClass('hidden')) {
    $('#timeline .timeline-loading').removeClass('hidden');
    $('#loadMoreTimeline').addClass('hidden');
    Timeline.loadMorePosts(timelineLoadMoreUrl);
  } else if ($(window).scrollTop() === 0) {
    Timeline.displayPendingNotification();
  }
});
